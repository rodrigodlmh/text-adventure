package game;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import org.apache.derby.jdbc.EmbeddedDataSource;

public class Inventory {
	
	// Max items that can be stored in the inventory
	private final int inventoryCapacity = 20;
	
	// Array list to add items more easily
	private int itemsInInventory = 0;
	
	//private String jdbcURL = "jdbc:derby:inventorydb;create=true";
	private EmbeddedDataSource ds = new EmbeddedDataSource();
	
	/**
	 * Creates the inventory and initializes the derby database
	 */
	Inventory() 
	{
		ds.setDatabaseName("inventorydb");
		ds.setCreateDatabase("create");
		
		try (Connection connection = ds.getConnection())
		{
	        Statement stmt = connection.createStatement();
			try
			{
				stmt.executeUpdate("DROP TABLE Item");
			}
			catch(Exception e)
			{
				
			}
			
			stmt.executeUpdate("CREATE TABLE Item(id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY," +
		             "name varchar(50), description varchar(255), used smallint)");
		} 
		catch(SQLException e) 
		{
			Main.log.debug(e);
		}
	}
	
	/**
	 * Add item to the inventory
	 * @param item to be added to the inventory
	 */
	void AddItem(Item item) 
	{
		if(itemsInInventory > inventoryCapacity) 
		{
			return;
		}
		
		try (Connection connection = ds.getConnection())
		{
			String sql = "INSERT INTO Item (name, description) VALUES (? ,?)";
			PreparedStatement statement = connection.prepareStatement(sql);
	        statement.setString(1, item.itemName);
	        statement.setString(2, item.itemDescription);
			statement.executeUpdate();
			
			itemsInInventory++;
		} 
		catch(SQLException e) 
		{
			Main.log.debug(e);
		} 
	}
	
	/**
	 * Add item to the inventory
	 * @param the name of the item that should be created and added to the inventory
	 */
	void AddItem(String itemName) 
	{
		Item item = CreateItemWithName(itemName);
		if(item == null) return;
		
		AddItem(item);
	}
	
	/**
	 * Display the inventory to the console
	 */
	void Display() 
	{
		try (Connection connection = ds.getConnection()) 
		{
			String sql = "SELECT * FROM Item";
			Statement statement = connection.createStatement();
			ResultSet set = statement.executeQuery(sql);
			while(set.next()) 
			{
				String name = set.getString("name");
				String description = set.getString("description");
				System.out.println("Name: " + name + ", Description: " + description);
			}
		} 
		catch(SQLException e) 
		{
			Main.log.debug(e);
		}
	}
	
	/**
	 * Deletes and item from the database
	 * @param item name that should be deleted
	 */
	void DeleteItem(String itemName)
	{
		try (Connection connection = ds.getConnection()) 
		{
			String sql = "DELETE FROM Item WHERE name = '" + itemName + "'";
			Statement statement = connection.createStatement();
			statement.executeUpdate(sql);
//			while(set.next()) 
//			{
//				String name = set.getString("name");
//				String description = set.getString("description");
//				System.out.println("Name: " + name + ", Description: " + description);
//			}
		} 
		catch(SQLException e) 
		{
			Main.log.debug(e);
		}
	}
	
	/**
	 * Gets item from the inventory
	 * @param item name that should be returned
	 * @return item that had the name or null if no item with that name was found
	 */
	String GetItem(String itemName) 
	{
		try (Connection connection = ds.getConnection()) 
		{
			String sql = "SELECT * FROM Item WHERE name = ?";
			PreparedStatement statement = connection.prepareStatement(sql);
			statement.setString(1, itemName);
			ResultSet set = statement.executeQuery();
			while(set.next()) 
			{
				String name = set.getString("name");
				
				if(itemName.equals(name)) 
				{
					return itemName;
				}
			}
			return null;
		} 
		catch(SQLException e) 
		{
			Main.log.debug(e);
		}
		return null;
	}
	
	/**
	 * Creates an item 
	 * @param Name of the item to create
	 * @return item object
	 */
	Item CreateItemWithName(String name) 
	{
		Item item = null;
		if(name.equals("potion")) 
		{
			item = new HealingPotion();
		}
		else if(name.equals("sword")) 
		{
			item = new Sword();
		}
		else if(name.equals("key")) 
		{
			item = new Key();
		}
		
		return item;
	}

	/**
	 * Shutdowns the database
	 */
//	void Shutdown() 
//	{
//		String jdbcURL = "jdbc:derby:inventorydb;shutdown=true";
//		try (Connection connection = DriverManager.getConnection(jdbcURL)){
//		} catch(SQLException e) {
//			Main.log.debug(e);
//		}
//	}
}
