package game;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

public class Inventory {
	
	// Max items that can be stored in the inventory
	private final int inventoryCapacity = 20;
	
	// Array list to add items more easily
	private int itemsInInventory = 0;
	
	// 10.1 CRUD Operations
	/**
	 * Creates the inventory and initializes the derby database
	 */
	Inventory() {
		String jdbcURL = "jdbc:derby:inventorydb;create=true";
		// 6.1 and 6.4 Try Catch
		try (Connection connection = DriverManager.getConnection(jdbcURL)){
	        DatabaseMetaData meta = connection.getMetaData();
	        ResultSet resultSet = meta.getTables(null, "APP", "ITEM", null);
	        if(!resultSet.next())
	        {
				String sql = "CREATE TABLE Item(id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY," +
			             "name varchar(50), description varchar(255), used smallint)";
				Statement statement = connection.createStatement();
				statement.executeUpdate(sql);
	        }
			connection.close();
		} catch(SQLException e) {
			System.out.println("Inventory error");
		}
	}
	
	// 1.3 Overloaded Method
	// 10.1 CRUD Operations
	/**
	 * Add item to the inventory
	 * @param item to be added to the inventory
	 */
	void AddItem(Item item) {
		if(itemsInInventory > inventoryCapacity) {
			return;
		}
		String jdbcURL = "jdbc:derby:inventorydb";
		// 6.1 and 6.4 Try Catch
		try (Connection connection = DriverManager.getConnection(jdbcURL);){
			String sql = "INSERT INTO Item (name, description) VALUES (? ,?)";
			// 10.3 Prepared statement
			PreparedStatement statement = connection.prepareStatement(sql);
	        statement.setString(1, item.itemName);
	        statement.setString(2, item.itemDescription);
			statement.executeUpdate();
			connection.close();
			itemsInInventory++;
		} catch(SQLException e) {
			System.out.println("Inventory error");
		} 
	}
	
	// 1.3 Overloaded Method
	/**
	 * Add item to the inventory
	 * @param the name of the item that should be created and added to the inventory
	 */
	void AddItem(String itemName) {
		Item item = CreateItemWithName(itemName);
		if(item == null) return;
		
		AddItem(item);
	}
	
	// 10.1 CRUD Operations
	/**
	 * Display the inventory to the console
	 */
	void Display() {
		String jdbcURL = "jdbc:derby:inventorydb";
		// 6.1 and 6.4 Try Catch
		try (Connection connection = DriverManager.getConnection(jdbcURL)) {
			String sql = "SELECT * FROM Item";
			Statement statement = connection.createStatement();
			ResultSet set = statement.executeQuery(sql);
			while(set.next()) {
				String name = set.getString("name");
				String description = set.getString("description");
				System.out.println("Name: " + name + ", Description: " + description);
			}
		} catch(SQLException e) {
			System.out.println("Inventory error");
		}
	}
	
	// 10.1 CRUD Operations
	/**
	 * Gets item from the inventory
	 * @param item name that should be returned
	 * @return item that had the name or null if no item with that name was found
	 */
	Item GetItem(String itemName) {
		String jdbcURL = "jdbc:derby:inventorydb";
		// 6.1 and 6.4 Try Catch
		try (Connection connection = DriverManager.getConnection(jdbcURL)) {
			String sql = "SELECT * FROM Item WHERE name = ?";
			// 10.3 Prepared statement
			PreparedStatement statement = connection.prepareStatement(sql);
			statement.setString(1, itemName);
			ResultSet set = statement.executeQuery(sql);
			while(set.next()) {
				String name = set.getString("name");
				if(itemName.equals(name)) {
					Item item = CreateItemWithName(itemName);
					return item;
				}
			}
			return null;
		} catch(SQLException e) {
			System.out.println("Inventory error");
		}
		return null;
	}
	
	/**
	 * Creates an item 
	 * @param Name of the item to create
	 * @return item object
	 */
	Item CreateItemWithName(String name) {
		Item item = null;
		if(name.equals("Healing Potion")) {
			item = new HealingPotion();
		}
		else if(name.equals("Sword")) {
			item = new Sword();
		}
		else if(name.equals("Key")) {
			item = new Key();
		}
		
		return item;
	}
	
	// 10.2 Closure of database
	/**
	 * Shutdowns the database
	 */
	void Shutdown() {
		String jdbcURL = "jdbc:derby:inventorydb;shutdown=true";
		// 6.1 and 6.4 Try Catch
		try (Connection connection = DriverManager.getConnection(jdbcURL)){
		} catch(SQLException e) {
			System.out.println("Derby shutdown");
		}
	}
}
